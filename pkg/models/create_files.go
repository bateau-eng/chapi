// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateFiles create files
//
// swagger:model CreateFiles
type CreateFiles struct {

	// The story ID that this file will be associated with.
	StoryID int64 `json:"story_id,omitempty"`

	// create files
	// Required: true
	CreateFiles map[string]*CreateFileObj `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *CreateFiles) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The story ID that this file will be associated with.
		StoryID int64 `json:"story_id,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv CreateFiles

	rcv.StoryID = stage1.StoryID
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "story_id")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]*CreateFileObj)
		for k, v := range stage2 {
			var toadd *CreateFileObj
			if err := json.Unmarshal(v, toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.CreateFiles = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m CreateFiles) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The story ID that this file will be associated with.
		StoryID int64 `json:"story_id,omitempty"`
	}

	stage1.StoryID = m.StoryID

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.CreateFiles) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.CreateFiles)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this create files
func (m *CreateFiles) Validate(formats strfmt.Registry) error {
	var res []error

	for k := range m.CreateFiles {

		if err := validate.Required(k, "body", m.CreateFiles[k]); err != nil {
			return err
		}
		if val, ok := m.CreateFiles[k]; ok {
			if val != nil {
				if err := val.Validate(formats); err != nil {
					return err
				}
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CreateFiles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateFiles) UnmarshalBinary(b []byte) error {
	var res CreateFiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
