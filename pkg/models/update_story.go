// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateStory update story
//
// swagger:model UpdateStory
type UpdateStory struct {

	// The ID of the story we want to move this story after.
	AfterID int64 `json:"after_id,omitempty"`

	// True if the story is archived, otherwise false.
	Archived bool `json:"archived,omitempty"`

	// The ID of the story we want to move this story before.
	BeforeID int64 `json:"before_id,omitempty"`

	// An array of IDs of Branches attached to the story.
	// Unique: true
	BranchIds []int64 `json:"branch_ids"`

	// An array of IDs of Commits attached to the story.
	// Unique: true
	CommitIds []int64 `json:"commit_ids"`

	// A manual override for the time/date the Story was completed.
	// Format: date-time
	CompletedAtOverride *strfmt.DateTime `json:"completed_at_override,omitempty"`

	// The due date of the story.
	// Format: date-time
	Deadline *strfmt.DateTime `json:"deadline,omitempty"`

	// The description of the story.
	Description string `json:"description,omitempty"`

	// The ID of the epic the story belongs to.
	EpicID *int64 `json:"epic_id,omitempty"`

	// The numeric point estimate of the story. Can also be null, which means unestimated.
	Estimate *int64 `json:"estimate,omitempty"`

	// An array of IDs of files attached to the story.
	// Unique: true
	FileIds []int64 `json:"file_ids"`

	// An array of UUIDs of the followers of this story.
	// Unique: true
	FollowerIds []strfmt.UUID `json:"follower_ids"`

	// The ID of the group to associate with this story
	// Format: uuid
	GroupID *strfmt.UUID `json:"group_id,omitempty"`

	// The ID of the iteration the story belongs to.
	IterationID *int64 `json:"iteration_id,omitempty"`

	// An array of labels attached to the story.
	Labels []*CreateLabelParams `json:"labels"`

	// An array of IDs of linked files attached to the story.
	// Unique: true
	LinkedFileIds []int64 `json:"linked_file_ids"`

	// move to
	// Enum: [first last]
	MoveTo string `json:"move_to,omitempty"`

	// The title of the story.
	Name string `json:"name,omitempty"`

	// An array of UUIDs of the owners of this story.
	// Unique: true
	OwnerIds []strfmt.UUID `json:"owner_ids"`

	// The ID of the project the story belongs to.
	ProjectID int64 `json:"project_id,omitempty"`

	// An array of IDs of Pull/Merge Requests attached to the story.
	// Unique: true
	PullRequestIds []int64 `json:"pull_request_ids"`

	// The ID of the member that requested the story.
	// Format: uuid
	RequestedByID strfmt.UUID `json:"requested_by_id,omitempty"`

	// A manual override for the time/date the Story was started.
	// Format: date-time
	StartedAtOverride *strfmt.DateTime `json:"started_at_override,omitempty"`

	// The type of story (feature, bug, chore).
	// Enum: [bug chore feature]
	StoryType string `json:"story_type,omitempty"`

	// The ID of the workflow state to put the story in.
	WorkflowStateID int64 `json:"workflow_state_id,omitempty"`
}

// Validate validates this update story
func (m *UpdateStory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranchIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletedAtOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowerIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkedFileIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePullRequestIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedByID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAtOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStory) validateBranchIds(formats strfmt.Registry) error {

	if swag.IsZero(m.BranchIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("branch_ids", "body", m.BranchIds); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStory) validateCommitIds(formats strfmt.Registry) error {

	if swag.IsZero(m.CommitIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("commit_ids", "body", m.CommitIds); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStory) validateCompletedAtOverride(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedAtOverride) { // not required
		return nil
	}

	if err := validate.FormatOf("completed_at_override", "body", "date-time", m.CompletedAtOverride.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStory) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(m.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("deadline", "body", "date-time", m.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStory) validateFileIds(formats strfmt.Registry) error {

	if swag.IsZero(m.FileIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("file_ids", "body", m.FileIds); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStory) validateFollowerIds(formats strfmt.Registry) error {

	if swag.IsZero(m.FollowerIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("follower_ids", "body", m.FollowerIds); err != nil {
		return err
	}

	for i := 0; i < len(m.FollowerIds); i++ {

		if err := validate.FormatOf("follower_ids"+"."+strconv.Itoa(i), "body", "uuid", m.FollowerIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpdateStory) validateGroupID(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupID) { // not required
		return nil
	}

	if err := validate.FormatOf("group_id", "body", "uuid", m.GroupID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStory) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateStory) validateLinkedFileIds(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkedFileIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("linked_file_ids", "body", m.LinkedFileIds); err != nil {
		return err
	}

	return nil
}

var updateStoryTypeMoveToPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["first","last"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateStoryTypeMoveToPropEnum = append(updateStoryTypeMoveToPropEnum, v)
	}
}

const (

	// UpdateStoryMoveToFirst captures enum value "first"
	UpdateStoryMoveToFirst string = "first"

	// UpdateStoryMoveToLast captures enum value "last"
	UpdateStoryMoveToLast string = "last"
)

// prop value enum
func (m *UpdateStory) validateMoveToEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateStoryTypeMoveToPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateStory) validateMoveTo(formats strfmt.Registry) error {

	if swag.IsZero(m.MoveTo) { // not required
		return nil
	}

	// value enum
	if err := m.validateMoveToEnum("move_to", "body", m.MoveTo); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStory) validateOwnerIds(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("owner_ids", "body", m.OwnerIds); err != nil {
		return err
	}

	for i := 0; i < len(m.OwnerIds); i++ {

		if err := validate.FormatOf("owner_ids"+"."+strconv.Itoa(i), "body", "uuid", m.OwnerIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpdateStory) validatePullRequestIds(formats strfmt.Registry) error {

	if swag.IsZero(m.PullRequestIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("pull_request_ids", "body", m.PullRequestIds); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStory) validateRequestedByID(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedByID) { // not required
		return nil
	}

	if err := validate.FormatOf("requested_by_id", "body", "uuid", m.RequestedByID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStory) validateStartedAtOverride(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAtOverride) { // not required
		return nil
	}

	if err := validate.FormatOf("started_at_override", "body", "date-time", m.StartedAtOverride.String(), formats); err != nil {
		return err
	}

	return nil
}

var updateStoryTypeStoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bug","chore","feature"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateStoryTypeStoryTypePropEnum = append(updateStoryTypeStoryTypePropEnum, v)
	}
}

const (

	// UpdateStoryStoryTypeBug captures enum value "bug"
	UpdateStoryStoryTypeBug string = "bug"

	// UpdateStoryStoryTypeChore captures enum value "chore"
	UpdateStoryStoryTypeChore string = "chore"

	// UpdateStoryStoryTypeFeature captures enum value "feature"
	UpdateStoryStoryTypeFeature string = "feature"
)

// prop value enum
func (m *UpdateStory) validateStoryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateStoryTypeStoryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateStory) validateStoryType(formats strfmt.Registry) error {

	if swag.IsZero(m.StoryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateStoryTypeEnum("story_type", "body", m.StoryType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateStory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateStory) UnmarshalBinary(b []byte) error {
	var res UpdateStory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
