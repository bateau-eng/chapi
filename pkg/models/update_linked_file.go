// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateLinkedFile update linked file
//
// swagger:model UpdateLinkedFile
type UpdateLinkedFile struct {

	// The description of the file.
	Description string `json:"description,omitempty"`

	// The name of the file.
	Name string `json:"name,omitempty"`

	// The filesize, if the integration provided it.
	Size int64 `json:"size,omitempty"`

	// The ID of the linked story.
	StoryID int64 `json:"story_id,omitempty"`

	// The URL of the thumbnail, if the integration provided it.
	ThumbnailURL string `json:"thumbnail_url,omitempty"`

	// The integration type of the file (e.g. google, dropbox, box).
	// Enum: [box dropbox google onedrive url]
	Type string `json:"type,omitempty"`

	// The UUID of the member that uploaded the file.
	// Format: uuid
	UploaderID strfmt.UUID `json:"uploader_id,omitempty"`

	// The URL of linked file.
	URL string `json:"url,omitempty"`
}

// Validate validates this update linked file
func (m *UpdateLinkedFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploaderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateLinkedFileTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["box","dropbox","google","onedrive","url"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateLinkedFileTypeTypePropEnum = append(updateLinkedFileTypeTypePropEnum, v)
	}
}

const (

	// UpdateLinkedFileTypeBox captures enum value "box"
	UpdateLinkedFileTypeBox string = "box"

	// UpdateLinkedFileTypeDropbox captures enum value "dropbox"
	UpdateLinkedFileTypeDropbox string = "dropbox"

	// UpdateLinkedFileTypeGoogle captures enum value "google"
	UpdateLinkedFileTypeGoogle string = "google"

	// UpdateLinkedFileTypeOnedrive captures enum value "onedrive"
	UpdateLinkedFileTypeOnedrive string = "onedrive"

	// UpdateLinkedFileTypeURL captures enum value "url"
	UpdateLinkedFileTypeURL string = "url"
)

// prop value enum
func (m *UpdateLinkedFile) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateLinkedFileTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateLinkedFile) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *UpdateLinkedFile) validateUploaderID(formats strfmt.Registry) error {

	if swag.IsZero(m.UploaderID) { // not required
		return nil
	}

	if err := validate.FormatOf("uploader_id", "body", "uuid", m.UploaderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateLinkedFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateLinkedFile) UnmarshalBinary(b []byte) error {
	var res UpdateLinkedFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
