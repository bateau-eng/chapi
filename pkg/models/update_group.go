// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateGroup update group
//
// swagger:model UpdateGroup
type UpdateGroup struct {

	// Whether or not this Group is archived.
	Archived *bool `json:"archived,omitempty"`

	// The description of this Group.
	Description string `json:"description,omitempty"`

	// The Icon id for the avatar of this Group.
	// Format: uuid
	DisplayIconID *strfmt.UUID `json:"display_icon_id,omitempty"`

	// The Member ids to add to this Group.
	// Unique: true
	MemberIds []strfmt.UUID `json:"member_ids"`

	// The mention name of this Group.
	MentionName string `json:"mention_name,omitempty"`

	// The name of this Group.
	Name string `json:"name,omitempty"`
}

// Validate validates this update group
func (m *UpdateGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayIconID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateGroup) validateDisplayIconID(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayIconID) { // not required
		return nil
	}

	if err := validate.FormatOf("display_icon_id", "body", "uuid", m.DisplayIconID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateGroup) validateMemberIds(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("member_ids", "body", m.MemberIds); err != nil {
		return err
	}

	for i := 0; i < len(m.MemberIds); i++ {

		if err := validate.FormatOf("member_ids"+"."+strconv.Itoa(i), "body", "uuid", m.MemberIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateGroup) UnmarshalBinary(b []byte) error {
	var res UpdateGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
