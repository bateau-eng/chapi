// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV3CategoriesCategoryPublicID(params *DeleteAPIV3CategoriesCategoryPublicIDParams) (*DeleteAPIV3CategoriesCategoryPublicIDNoContent, error)

	DeleteAPIV3EntityTemplatesEntityTemplatePublicID(params *DeleteAPIV3EntityTemplatesEntityTemplatePublicIDParams) (*DeleteAPIV3EntityTemplatesEntityTemplatePublicIDNoContent, error)

	DeleteAPIV3EpicsEpicPublicID(params *DeleteAPIV3EpicsEpicPublicIDParams) (*DeleteAPIV3EpicsEpicPublicIDNoContent, error)

	DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicID(params *DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams) (*DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicIDNoContent, error)

	DeleteAPIV3FilesFilePublicID(params *DeleteAPIV3FilesFilePublicIDParams) (*DeleteAPIV3FilesFilePublicIDNoContent, error)

	DeleteAPIV3IterationsIterationPublicID(params *DeleteAPIV3IterationsIterationPublicIDParams) (*DeleteAPIV3IterationsIterationPublicIDNoContent, error)

	DeleteAPIV3LabelsLabelPublicID(params *DeleteAPIV3LabelsLabelPublicIDParams) (*DeleteAPIV3LabelsLabelPublicIDNoContent, error)

	DeleteAPIV3LinkedFilesLinkedFilePublicID(params *DeleteAPIV3LinkedFilesLinkedFilePublicIDParams) (*DeleteAPIV3LinkedFilesLinkedFilePublicIDNoContent, error)

	DeleteAPIV3MilestonesMilestonePublicID(params *DeleteAPIV3MilestonesMilestonePublicIDParams) (*DeleteAPIV3MilestonesMilestonePublicIDNoContent, error)

	DeleteAPIV3ProjectsProjectPublicID(params *DeleteAPIV3ProjectsProjectPublicIDParams) (*DeleteAPIV3ProjectsProjectPublicIDNoContent, error)

	DeleteAPIV3StoriesBulk(params *DeleteAPIV3StoriesBulkParams) (*DeleteAPIV3StoriesBulkNoContent, error)

	DeleteAPIV3StoriesStoryPublicID(params *DeleteAPIV3StoriesStoryPublicIDParams) (*DeleteAPIV3StoriesStoryPublicIDNoContent, error)

	DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicID(params *DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDParams) (*DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDNoContent, error)

	DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions(params *DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsParams) (*DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsNoContent, error)

	DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicID(params *DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicIDParams) (*DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicIDNoContent, error)

	DeleteAPIV3StoryLinksStoryLinkPublicID(params *DeleteAPIV3StoryLinksStoryLinkPublicIDParams) (*DeleteAPIV3StoryLinksStoryLinkPublicIDNoContent, error)

	GetAPIV3Categories(params *GetAPIV3CategoriesParams) (*GetAPIV3CategoriesOK, error)

	GetAPIV3CategoriesCategoryPublicID(params *GetAPIV3CategoriesCategoryPublicIDParams) (*GetAPIV3CategoriesCategoryPublicIDOK, error)

	GetAPIV3CategoriesCategoryPublicIDMilestones(params *GetAPIV3CategoriesCategoryPublicIDMilestonesParams) (*GetAPIV3CategoriesCategoryPublicIDMilestonesOK, error)

	GetAPIV3EntityTemplates(params *GetAPIV3EntityTemplatesParams) (*GetAPIV3EntityTemplatesOK, error)

	GetAPIV3EntityTemplatesEntityTemplatePublicID(params *GetAPIV3EntityTemplatesEntityTemplatePublicIDParams) (*GetAPIV3EntityTemplatesEntityTemplatePublicIDOK, error)

	GetAPIV3EpicWorkflow(params *GetAPIV3EpicWorkflowParams) (*GetAPIV3EpicWorkflowOK, error)

	GetAPIV3Epics(params *GetAPIV3EpicsParams) (*GetAPIV3EpicsOK, error)

	GetAPIV3EpicsEpicPublicID(params *GetAPIV3EpicsEpicPublicIDParams) (*GetAPIV3EpicsEpicPublicIDOK, error)

	GetAPIV3EpicsEpicPublicIDComments(params *GetAPIV3EpicsEpicPublicIDCommentsParams) (*GetAPIV3EpicsEpicPublicIDCommentsOK, error)

	GetAPIV3EpicsEpicPublicIDCommentsCommentPublicID(params *GetAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams) (*GetAPIV3EpicsEpicPublicIDCommentsCommentPublicIDOK, error)

	GetAPIV3EpicsEpicPublicIDStories(params *GetAPIV3EpicsEpicPublicIDStoriesParams) (*GetAPIV3EpicsEpicPublicIDStoriesOK, error)

	GetAPIV3Files(params *GetAPIV3FilesParams) (*GetAPIV3FilesOK, error)

	GetAPIV3FilesFilePublicID(params *GetAPIV3FilesFilePublicIDParams) (*GetAPIV3FilesFilePublicIDOK, error)

	GetAPIV3Groups(params *GetAPIV3GroupsParams) (*GetAPIV3GroupsOK, error)

	GetAPIV3GroupsGroupPublicID(params *GetAPIV3GroupsGroupPublicIDParams) (*GetAPIV3GroupsGroupPublicIDOK, error)

	GetAPIV3Iterations(params *GetAPIV3IterationsParams) (*GetAPIV3IterationsOK, error)

	GetAPIV3IterationsIterationPublicID(params *GetAPIV3IterationsIterationPublicIDParams) (*GetAPIV3IterationsIterationPublicIDOK, error)

	GetAPIV3IterationsIterationPublicIDStories(params *GetAPIV3IterationsIterationPublicIDStoriesParams) (*GetAPIV3IterationsIterationPublicIDStoriesOK, error)

	GetAPIV3Labels(params *GetAPIV3LabelsParams) (*GetAPIV3LabelsOK, error)

	GetAPIV3LabelsLabelPublicID(params *GetAPIV3LabelsLabelPublicIDParams) (*GetAPIV3LabelsLabelPublicIDOK, error)

	GetAPIV3LabelsLabelPublicIDEpics(params *GetAPIV3LabelsLabelPublicIDEpicsParams) (*GetAPIV3LabelsLabelPublicIDEpicsOK, error)

	GetAPIV3LabelsLabelPublicIDStories(params *GetAPIV3LabelsLabelPublicIDStoriesParams) (*GetAPIV3LabelsLabelPublicIDStoriesOK, error)

	GetAPIV3LinkedFiles(params *GetAPIV3LinkedFilesParams) (*GetAPIV3LinkedFilesOK, error)

	GetAPIV3LinkedFilesLinkedFilePublicID(params *GetAPIV3LinkedFilesLinkedFilePublicIDParams) (*GetAPIV3LinkedFilesLinkedFilePublicIDOK, error)

	GetAPIV3Member(params *GetAPIV3MemberParams) (*GetAPIV3MemberOK, error)

	GetAPIV3Members(params *GetAPIV3MembersParams) (*GetAPIV3MembersOK, error)

	GetAPIV3MembersMemberPublicID(params *GetAPIV3MembersMemberPublicIDParams) (*GetAPIV3MembersMemberPublicIDOK, error)

	GetAPIV3Milestones(params *GetAPIV3MilestonesParams) (*GetAPIV3MilestonesOK, error)

	GetAPIV3MilestonesMilestonePublicID(params *GetAPIV3MilestonesMilestonePublicIDParams) (*GetAPIV3MilestonesMilestonePublicIDOK, error)

	GetAPIV3MilestonesMilestonePublicIDEpics(params *GetAPIV3MilestonesMilestonePublicIDEpicsParams) (*GetAPIV3MilestonesMilestonePublicIDEpicsOK, error)

	GetAPIV3Projects(params *GetAPIV3ProjectsParams) (*GetAPIV3ProjectsOK, error)

	GetAPIV3ProjectsProjectPublicID(params *GetAPIV3ProjectsProjectPublicIDParams) (*GetAPIV3ProjectsProjectPublicIDOK, error)

	GetAPIV3ProjectsProjectPublicIDStories(params *GetAPIV3ProjectsProjectPublicIDStoriesParams) (*GetAPIV3ProjectsProjectPublicIDStoriesOK, error)

	GetAPIV3Repositories(params *GetAPIV3RepositoriesParams) (*GetAPIV3RepositoriesOK, error)

	GetAPIV3RepositoriesRepoPublicID(params *GetAPIV3RepositoriesRepoPublicIDParams) (*GetAPIV3RepositoriesRepoPublicIDOK, error)

	GetAPIV3Search(params *GetAPIV3SearchParams) (*GetAPIV3SearchOK, error)

	GetAPIV3SearchEpics(params *GetAPIV3SearchEpicsParams) (*GetAPIV3SearchEpicsOK, error)

	GetAPIV3SearchStories(params *GetAPIV3SearchStoriesParams) (*GetAPIV3SearchStoriesOK, error)

	GetAPIV3StoriesStoryPublicID(params *GetAPIV3StoriesStoryPublicIDParams) (*GetAPIV3StoriesStoryPublicIDOK, error)

	GetAPIV3StoriesStoryPublicIDCommentsCommentPublicID(params *GetAPIV3StoriesStoryPublicIDCommentsCommentPublicIDParams) (*GetAPIV3StoriesStoryPublicIDCommentsCommentPublicIDOK, error)

	GetAPIV3StoriesStoryPublicIDTasksTaskPublicID(params *GetAPIV3StoriesStoryPublicIDTasksTaskPublicIDParams) (*GetAPIV3StoriesStoryPublicIDTasksTaskPublicIDOK, error)

	GetAPIV3StoryLinksStoryLinkPublicID(params *GetAPIV3StoryLinksStoryLinkPublicIDParams) (*GetAPIV3StoryLinksStoryLinkPublicIDOK, error)

	GetAPIV3Teams(params *GetAPIV3TeamsParams) (*GetAPIV3TeamsOK, error)

	GetAPIV3TeamsTeamPublicID(params *GetAPIV3TeamsTeamPublicIDParams) (*GetAPIV3TeamsTeamPublicIDOK, error)

	GetAPIV3Workflows(params *GetAPIV3WorkflowsParams) (*GetAPIV3WorkflowsOK, error)

	PostAPIV3Categories(params *PostAPIV3CategoriesParams) (*PostAPIV3CategoriesCreated, error)

	PostAPIV3EntityTemplates(params *PostAPIV3EntityTemplatesParams) (*PostAPIV3EntityTemplatesCreated, error)

	PostAPIV3Epics(params *PostAPIV3EpicsParams) (*PostAPIV3EpicsCreated, error)

	PostAPIV3EpicsEpicPublicIDComments(params *PostAPIV3EpicsEpicPublicIDCommentsParams) (*PostAPIV3EpicsEpicPublicIDCommentsCreated, error)

	PostAPIV3EpicsEpicPublicIDCommentsCommentPublicID(params *PostAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams) (*PostAPIV3EpicsEpicPublicIDCommentsCommentPublicIDCreated, error)

	PostAPIV3Files(params *PostAPIV3FilesParams) (*PostAPIV3FilesCreated, error)

	PostAPIV3Groups(params *PostAPIV3GroupsParams) (*PostAPIV3GroupsCreated, error)

	PostAPIV3Iterations(params *PostAPIV3IterationsParams) (*PostAPIV3IterationsCreated, error)

	PostAPIV3Labels(params *PostAPIV3LabelsParams) (*PostAPIV3LabelsCreated, error)

	PostAPIV3LinkedFiles(params *PostAPIV3LinkedFilesParams) (*PostAPIV3LinkedFilesCreated, error)

	PostAPIV3Milestones(params *PostAPIV3MilestonesParams) (*PostAPIV3MilestonesCreated, error)

	PostAPIV3Projects(params *PostAPIV3ProjectsParams) (*PostAPIV3ProjectsCreated, error)

	PostAPIV3Stories(params *PostAPIV3StoriesParams) (*PostAPIV3StoriesCreated, error)

	PostAPIV3StoriesBulk(params *PostAPIV3StoriesBulkParams) (*PostAPIV3StoriesBulkCreated, error)

	PostAPIV3StoriesSearch(params *PostAPIV3StoriesSearchParams) (*PostAPIV3StoriesSearchCreated, error)

	PostAPIV3StoriesStoryPublicIDComments(params *PostAPIV3StoriesStoryPublicIDCommentsParams) (*PostAPIV3StoriesStoryPublicIDCommentsCreated, error)

	PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions(params *PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsParams) (*PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsCreated, error)

	PostAPIV3StoriesStoryPublicIDTasks(params *PostAPIV3StoriesStoryPublicIDTasksParams) (*PostAPIV3StoriesStoryPublicIDTasksCreated, error)

	PostAPIV3StoryLinks(params *PostAPIV3StoryLinksParams) (*PostAPIV3StoryLinksCreated, error)

	PutAPIV3CategoriesCategoryPublicID(params *PutAPIV3CategoriesCategoryPublicIDParams) (*PutAPIV3CategoriesCategoryPublicIDOK, error)

	PutAPIV3EntityTemplatesDisable(params *PutAPIV3EntityTemplatesDisableParams) (*PutAPIV3EntityTemplatesDisableNoContent, error)

	PutAPIV3EntityTemplatesEnable(params *PutAPIV3EntityTemplatesEnableParams) (*PutAPIV3EntityTemplatesEnableNoContent, error)

	PutAPIV3EntityTemplatesEntityTemplatePublicID(params *PutAPIV3EntityTemplatesEntityTemplatePublicIDParams) (*PutAPIV3EntityTemplatesEntityTemplatePublicIDOK, error)

	PutAPIV3EpicsEpicPublicID(params *PutAPIV3EpicsEpicPublicIDParams) (*PutAPIV3EpicsEpicPublicIDOK, error)

	PutAPIV3EpicsEpicPublicIDCommentsCommentPublicID(params *PutAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams) (*PutAPIV3EpicsEpicPublicIDCommentsCommentPublicIDOK, error)

	PutAPIV3FilesFilePublicID(params *PutAPIV3FilesFilePublicIDParams) (*PutAPIV3FilesFilePublicIDOK, error)

	PutAPIV3GroupsDisable(params *PutAPIV3GroupsDisableParams) (*PutAPIV3GroupsDisableNoContent, error)

	PutAPIV3GroupsEnable(params *PutAPIV3GroupsEnableParams) (*PutAPIV3GroupsEnableNoContent, error)

	PutAPIV3GroupsGroupPublicID(params *PutAPIV3GroupsGroupPublicIDParams) (*PutAPIV3GroupsGroupPublicIDOK, error)

	PutAPIV3IterationsDisable(params *PutAPIV3IterationsDisableParams) (*PutAPIV3IterationsDisableNoContent, error)

	PutAPIV3IterationsEnable(params *PutAPIV3IterationsEnableParams) (*PutAPIV3IterationsEnableNoContent, error)

	PutAPIV3IterationsIterationPublicID(params *PutAPIV3IterationsIterationPublicIDParams) (*PutAPIV3IterationsIterationPublicIDOK, error)

	PutAPIV3LabelsLabelPublicID(params *PutAPIV3LabelsLabelPublicIDParams) (*PutAPIV3LabelsLabelPublicIDOK, error)

	PutAPIV3LinkedFilesLinkedFilePublicID(params *PutAPIV3LinkedFilesLinkedFilePublicIDParams) (*PutAPIV3LinkedFilesLinkedFilePublicIDOK, error)

	PutAPIV3MilestonesMilestonePublicID(params *PutAPIV3MilestonesMilestonePublicIDParams) (*PutAPIV3MilestonesMilestonePublicIDOK, error)

	PutAPIV3ProjectsProjectPublicID(params *PutAPIV3ProjectsProjectPublicIDParams) (*PutAPIV3ProjectsProjectPublicIDOK, error)

	PutAPIV3StoriesBulk(params *PutAPIV3StoriesBulkParams) (*PutAPIV3StoriesBulkOK, error)

	PutAPIV3StoriesStoryPublicID(params *PutAPIV3StoriesStoryPublicIDParams) (*PutAPIV3StoriesStoryPublicIDOK, error)

	PutAPIV3StoriesStoryPublicIDCommentsCommentPublicID(params *PutAPIV3StoriesStoryPublicIDCommentsCommentPublicIDParams) (*PutAPIV3StoriesStoryPublicIDCommentsCommentPublicIDOK, error)

	PutAPIV3StoriesStoryPublicIDTasksTaskPublicID(params *PutAPIV3StoriesStoryPublicIDTasksTaskPublicIDParams) (*PutAPIV3StoriesStoryPublicIDTasksTaskPublicIDOK, error)

	PutAPIV3StoryLinksStoryLinkPublicID(params *PutAPIV3StoryLinksStoryLinkPublicIDParams) (*PutAPIV3StoryLinksStoryLinkPublicIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIV3CategoriesCategoryPublicID deletes category

  Delete Category can be used to delete any Category.
*/
func (a *Client) DeleteAPIV3CategoriesCategoryPublicID(params *DeleteAPIV3CategoriesCategoryPublicIDParams) (*DeleteAPIV3CategoriesCategoryPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3CategoriesCategoryPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3CategoriesCategoryPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/categories/{category-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3CategoriesCategoryPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3CategoriesCategoryPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3CategoriesCategoryPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3EntityTemplatesEntityTemplatePublicID deletes entity template
*/
func (a *Client) DeleteAPIV3EntityTemplatesEntityTemplatePublicID(params *DeleteAPIV3EntityTemplatesEntityTemplatePublicIDParams) (*DeleteAPIV3EntityTemplatesEntityTemplatePublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3EntityTemplatesEntityTemplatePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3EntityTemplatesEntityTemplatePublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/entity-templates/{entity-template-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3EntityTemplatesEntityTemplatePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3EntityTemplatesEntityTemplatePublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3EntityTemplatesEntityTemplatePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3EpicsEpicPublicID deletes epic

  Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.
*/
func (a *Client) DeleteAPIV3EpicsEpicPublicID(params *DeleteAPIV3EpicsEpicPublicIDParams) (*DeleteAPIV3EpicsEpicPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3EpicsEpicPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3EpicsEpicPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/epics/{epic-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3EpicsEpicPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3EpicsEpicPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3EpicsEpicPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicID deletes epic comment

  This endpoint allows you to delete a Comment from an Epic.
*/
func (a *Client) DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicID(params *DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams) (*DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3EpicsEpicPublicIDCommentsCommentPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3FilesFilePublicID deletes file

  Delete File can be used to delete any previously attached File.
*/
func (a *Client) DeleteAPIV3FilesFilePublicID(params *DeleteAPIV3FilesFilePublicIDParams) (*DeleteAPIV3FilesFilePublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3FilesFilePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3FilesFilePublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/files/{file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3FilesFilePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3FilesFilePublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3FilesFilePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3IterationsIterationPublicID deletes iteration
*/
func (a *Client) DeleteAPIV3IterationsIterationPublicID(params *DeleteAPIV3IterationsIterationPublicIDParams) (*DeleteAPIV3IterationsIterationPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3IterationsIterationPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3IterationsIterationPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/iterations/{iteration-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3IterationsIterationPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3IterationsIterationPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3IterationsIterationPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3LabelsLabelPublicID deletes label

  Delete Label can be used to delete any Label.
*/
func (a *Client) DeleteAPIV3LabelsLabelPublicID(params *DeleteAPIV3LabelsLabelPublicIDParams) (*DeleteAPIV3LabelsLabelPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3LabelsLabelPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3LabelsLabelPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/labels/{label-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3LabelsLabelPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3LabelsLabelPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3LabelsLabelPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3LinkedFilesLinkedFilePublicID deletes linked file

  Delete Linked File can be used to delete any previously attached Linked-File.
*/
func (a *Client) DeleteAPIV3LinkedFilesLinkedFilePublicID(params *DeleteAPIV3LinkedFilesLinkedFilePublicIDParams) (*DeleteAPIV3LinkedFilesLinkedFilePublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3LinkedFilesLinkedFilePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3LinkedFilesLinkedFilePublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/linked-files/{linked-file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3LinkedFilesLinkedFilePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3LinkedFilesLinkedFilePublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3LinkedFilesLinkedFilePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3MilestonesMilestonePublicID deletes milestone

  Delete Milestone can be used to delete any Milestone.
*/
func (a *Client) DeleteAPIV3MilestonesMilestonePublicID(params *DeleteAPIV3MilestonesMilestonePublicIDParams) (*DeleteAPIV3MilestonesMilestonePublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3MilestonesMilestonePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3MilestonesMilestonePublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/milestones/{milestone-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3MilestonesMilestonePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3MilestonesMilestonePublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3MilestonesMilestonePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3ProjectsProjectPublicID deletes project

  Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.
*/
func (a *Client) DeleteAPIV3ProjectsProjectPublicID(params *DeleteAPIV3ProjectsProjectPublicIDParams) (*DeleteAPIV3ProjectsProjectPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3ProjectsProjectPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3ProjectsProjectPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/projects/{project-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3ProjectsProjectPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3ProjectsProjectPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3ProjectsProjectPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3StoriesBulk deletes multiple stories

  Delete Multiple Stories allows you to delete multiple archived stories at once.
*/
func (a *Client) DeleteAPIV3StoriesBulk(params *DeleteAPIV3StoriesBulkParams) (*DeleteAPIV3StoriesBulkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3StoriesBulkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3StoriesBulk",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3StoriesBulkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3StoriesBulkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3StoriesBulk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3StoriesStoryPublicID deletes story

  Delete Story can be used to delete any Story.
*/
func (a *Client) DeleteAPIV3StoriesStoryPublicID(params *DeleteAPIV3StoriesStoryPublicIDParams) (*DeleteAPIV3StoriesStoryPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3StoriesStoryPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3StoriesStoryPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/{story-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3StoriesStoryPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3StoriesStoryPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3StoriesStoryPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicID deletes comment

  Delete a Comment from any story.
*/
func (a *Client) DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicID(params *DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDParams) (*DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions deletes reaction

  Delete a Reaction from any comment.
*/
func (a *Client) DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions(params *DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsParams) (*DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicID deletes task

  Delete Task can be used to delete any previously created Task on a Story.
*/
func (a *Client) DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicID(params *DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicIDParams) (*DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3StoriesStoryPublicIDTasksTaskPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/{story-public-id}/tasks/{task-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3StoriesStoryPublicIDTasksTaskPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV3StoryLinksStoryLinkPublicID deletes story link

  Removes the relationship between the stories for the given Story Link.
*/
func (a *Client) DeleteAPIV3StoryLinksStoryLinkPublicID(params *DeleteAPIV3StoryLinksStoryLinkPublicIDParams) (*DeleteAPIV3StoryLinksStoryLinkPublicIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3StoryLinksStoryLinkPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV3StoryLinksStoryLinkPublicID",
		Method:             "DELETE",
		PathPattern:        "/api/v3/story-links/{story-link-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV3StoryLinksStoryLinkPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV3StoryLinksStoryLinkPublicIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV3StoryLinksStoryLinkPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Categories lists categories

  List Categories returns a list of all Categories and their attributes.
*/
func (a *Client) GetAPIV3Categories(params *GetAPIV3CategoriesParams) (*GetAPIV3CategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3CategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Categories",
		Method:             "GET",
		PathPattern:        "/api/v3/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3CategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3CategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Categories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3CategoriesCategoryPublicID gets category

  Get Category returns information about the selected Category.
*/
func (a *Client) GetAPIV3CategoriesCategoryPublicID(params *GetAPIV3CategoriesCategoryPublicIDParams) (*GetAPIV3CategoriesCategoryPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3CategoriesCategoryPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3CategoriesCategoryPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/categories/{category-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3CategoriesCategoryPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3CategoriesCategoryPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3CategoriesCategoryPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3CategoriesCategoryPublicIDMilestones lists category milestones

  List Category Milestones returns a list of all Milestones with the Category.
*/
func (a *Client) GetAPIV3CategoriesCategoryPublicIDMilestones(params *GetAPIV3CategoriesCategoryPublicIDMilestonesParams) (*GetAPIV3CategoriesCategoryPublicIDMilestonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3CategoriesCategoryPublicIDMilestonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3CategoriesCategoryPublicIDMilestones",
		Method:             "GET",
		PathPattern:        "/api/v3/categories/{category-public-id}/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3CategoriesCategoryPublicIDMilestonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3CategoriesCategoryPublicIDMilestonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3CategoriesCategoryPublicIDMilestones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3EntityTemplates lists entity templates

  List all the entity templates for an organization.
*/
func (a *Client) GetAPIV3EntityTemplates(params *GetAPIV3EntityTemplatesParams) (*GetAPIV3EntityTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3EntityTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3EntityTemplates",
		Method:             "GET",
		PathPattern:        "/api/v3/entity-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3EntityTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3EntityTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3EntityTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3EntityTemplatesEntityTemplatePublicID gets entity template

  Get Entity Template returns information about a given entity template.
*/
func (a *Client) GetAPIV3EntityTemplatesEntityTemplatePublicID(params *GetAPIV3EntityTemplatesEntityTemplatePublicIDParams) (*GetAPIV3EntityTemplatesEntityTemplatePublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3EntityTemplatesEntityTemplatePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3EntityTemplatesEntityTemplatePublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/entity-templates/{entity-template-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3EntityTemplatesEntityTemplatePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3EntityTemplatesEntityTemplatePublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3EntityTemplatesEntityTemplatePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3EpicWorkflow gets epic workflow

  Get Epic Workflow returns the Epic Workflow for the organization.
*/
func (a *Client) GetAPIV3EpicWorkflow(params *GetAPIV3EpicWorkflowParams) (*GetAPIV3EpicWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3EpicWorkflowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3EpicWorkflow",
		Method:             "GET",
		PathPattern:        "/api/v3/epic-workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3EpicWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3EpicWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3EpicWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Epics lists epics

  List Epics returns a list of all Epics and their attributes.
*/
func (a *Client) GetAPIV3Epics(params *GetAPIV3EpicsParams) (*GetAPIV3EpicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3EpicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Epics",
		Method:             "GET",
		PathPattern:        "/api/v3/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3EpicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3EpicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Epics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3EpicsEpicPublicID gets epic

  Get Epic returns information about the selected Epic.
*/
func (a *Client) GetAPIV3EpicsEpicPublicID(params *GetAPIV3EpicsEpicPublicIDParams) (*GetAPIV3EpicsEpicPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3EpicsEpicPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3EpicsEpicPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/epics/{epic-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3EpicsEpicPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3EpicsEpicPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3EpicsEpicPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3EpicsEpicPublicIDComments lists epic comments

  Get a list of all Comments on an Epic.
*/
func (a *Client) GetAPIV3EpicsEpicPublicIDComments(params *GetAPIV3EpicsEpicPublicIDCommentsParams) (*GetAPIV3EpicsEpicPublicIDCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3EpicsEpicPublicIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3EpicsEpicPublicIDComments",
		Method:             "GET",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3EpicsEpicPublicIDCommentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3EpicsEpicPublicIDCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3EpicsEpicPublicIDComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3EpicsEpicPublicIDCommentsCommentPublicID gets epic comment

  This endpoint returns information about the selected Epic Comment.
*/
func (a *Client) GetAPIV3EpicsEpicPublicIDCommentsCommentPublicID(params *GetAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams) (*GetAPIV3EpicsEpicPublicIDCommentsCommentPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3EpicsEpicPublicIDCommentsCommentPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3EpicsEpicPublicIDCommentsCommentPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3EpicsEpicPublicIDCommentsCommentPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3EpicsEpicPublicIDCommentsCommentPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3EpicsEpicPublicIDStories lists epic stories

  Get a list of all Stories in an Epic.
*/
func (a *Client) GetAPIV3EpicsEpicPublicIDStories(params *GetAPIV3EpicsEpicPublicIDStoriesParams) (*GetAPIV3EpicsEpicPublicIDStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3EpicsEpicPublicIDStoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3EpicsEpicPublicIDStories",
		Method:             "GET",
		PathPattern:        "/api/v3/epics/{epic-public-id}/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3EpicsEpicPublicIDStoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3EpicsEpicPublicIDStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3EpicsEpicPublicIDStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Files lists files

  List Files returns a list of all Files and related attributes in your Clubhouse.
*/
func (a *Client) GetAPIV3Files(params *GetAPIV3FilesParams) (*GetAPIV3FilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3FilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Files",
		Method:             "GET",
		PathPattern:        "/api/v3/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3FilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3FilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Files: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3FilesFilePublicID gets file

  Get File returns information about the selected File.
*/
func (a *Client) GetAPIV3FilesFilePublicID(params *GetAPIV3FilesFilePublicIDParams) (*GetAPIV3FilesFilePublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3FilesFilePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3FilesFilePublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/files/{file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3FilesFilePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3FilesFilePublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3FilesFilePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Groups lists groups
*/
func (a *Client) GetAPIV3Groups(params *GetAPIV3GroupsParams) (*GetAPIV3GroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3GroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Groups",
		Method:             "GET",
		PathPattern:        "/api/v3/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3GroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3GroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3GroupsGroupPublicID gets group
*/
func (a *Client) GetAPIV3GroupsGroupPublicID(params *GetAPIV3GroupsGroupPublicIDParams) (*GetAPIV3GroupsGroupPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3GroupsGroupPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3GroupsGroupPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/groups/{group-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3GroupsGroupPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3GroupsGroupPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3GroupsGroupPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Iterations lists iterations
*/
func (a *Client) GetAPIV3Iterations(params *GetAPIV3IterationsParams) (*GetAPIV3IterationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3IterationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Iterations",
		Method:             "GET",
		PathPattern:        "/api/v3/iterations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3IterationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3IterationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Iterations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3IterationsIterationPublicID gets iteration
*/
func (a *Client) GetAPIV3IterationsIterationPublicID(params *GetAPIV3IterationsIterationPublicIDParams) (*GetAPIV3IterationsIterationPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3IterationsIterationPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3IterationsIterationPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/iterations/{iteration-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3IterationsIterationPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3IterationsIterationPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3IterationsIterationPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3IterationsIterationPublicIDStories lists iteration stories

  Get a list of all Stories in an Iteration.
*/
func (a *Client) GetAPIV3IterationsIterationPublicIDStories(params *GetAPIV3IterationsIterationPublicIDStoriesParams) (*GetAPIV3IterationsIterationPublicIDStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3IterationsIterationPublicIDStoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3IterationsIterationPublicIDStories",
		Method:             "GET",
		PathPattern:        "/api/v3/iterations/{iteration-public-id}/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3IterationsIterationPublicIDStoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3IterationsIterationPublicIDStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3IterationsIterationPublicIDStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Labels lists labels

  List Labels returns a list of all Labels and their attributes.
*/
func (a *Client) GetAPIV3Labels(params *GetAPIV3LabelsParams) (*GetAPIV3LabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Labels",
		Method:             "GET",
		PathPattern:        "/api/v3/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3LabelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3LabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Labels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3LabelsLabelPublicID gets label

  Get Label returns information about the selected Label.
*/
func (a *Client) GetAPIV3LabelsLabelPublicID(params *GetAPIV3LabelsLabelPublicIDParams) (*GetAPIV3LabelsLabelPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LabelsLabelPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3LabelsLabelPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/labels/{label-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3LabelsLabelPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3LabelsLabelPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3LabelsLabelPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3LabelsLabelPublicIDEpics lists label epics

  List all of the Epics with the Label.
*/
func (a *Client) GetAPIV3LabelsLabelPublicIDEpics(params *GetAPIV3LabelsLabelPublicIDEpicsParams) (*GetAPIV3LabelsLabelPublicIDEpicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LabelsLabelPublicIDEpicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3LabelsLabelPublicIDEpics",
		Method:             "GET",
		PathPattern:        "/api/v3/labels/{label-public-id}/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3LabelsLabelPublicIDEpicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3LabelsLabelPublicIDEpicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3LabelsLabelPublicIDEpics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3LabelsLabelPublicIDStories lists label stories

  List all of the Stories with the Label.
*/
func (a *Client) GetAPIV3LabelsLabelPublicIDStories(params *GetAPIV3LabelsLabelPublicIDStoriesParams) (*GetAPIV3LabelsLabelPublicIDStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LabelsLabelPublicIDStoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3LabelsLabelPublicIDStories",
		Method:             "GET",
		PathPattern:        "/api/v3/labels/{label-public-id}/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3LabelsLabelPublicIDStoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3LabelsLabelPublicIDStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3LabelsLabelPublicIDStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3LinkedFiles lists linked files

  List Linked Files returns a list of all Linked-Files and their attributes.
*/
func (a *Client) GetAPIV3LinkedFiles(params *GetAPIV3LinkedFilesParams) (*GetAPIV3LinkedFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LinkedFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3LinkedFiles",
		Method:             "GET",
		PathPattern:        "/api/v3/linked-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3LinkedFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3LinkedFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3LinkedFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3LinkedFilesLinkedFilePublicID gets linked file

  Get File returns information about the selected Linked File.
*/
func (a *Client) GetAPIV3LinkedFilesLinkedFilePublicID(params *GetAPIV3LinkedFilesLinkedFilePublicIDParams) (*GetAPIV3LinkedFilesLinkedFilePublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LinkedFilesLinkedFilePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3LinkedFilesLinkedFilePublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/linked-files/{linked-file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3LinkedFilesLinkedFilePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3LinkedFilesLinkedFilePublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3LinkedFilesLinkedFilePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Member gets current member info

  Returns information about the authenticated member.
*/
func (a *Client) GetAPIV3Member(params *GetAPIV3MemberParams) (*GetAPIV3MemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Member",
		Method:             "GET",
		PathPattern:        "/api/v3/member",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3MemberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3MemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Members lists members

  List Members returns information about members of the organization.
*/
func (a *Client) GetAPIV3Members(params *GetAPIV3MembersParams) (*GetAPIV3MembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Members",
		Method:             "GET",
		PathPattern:        "/api/v3/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3MembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3MembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Members: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3MembersMemberPublicID gets member

  Returns information about a Member.
*/
func (a *Client) GetAPIV3MembersMemberPublicID(params *GetAPIV3MembersMemberPublicIDParams) (*GetAPIV3MembersMemberPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MembersMemberPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3MembersMemberPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/members/{member-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3MembersMemberPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3MembersMemberPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3MembersMemberPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Milestones lists milestones

  List Milestones returns a list of all Milestones and their attributes.
*/
func (a *Client) GetAPIV3Milestones(params *GetAPIV3MilestonesParams) (*GetAPIV3MilestonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MilestonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Milestones",
		Method:             "GET",
		PathPattern:        "/api/v3/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3MilestonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3MilestonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Milestones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3MilestonesMilestonePublicID gets milestone

  Get Milestone returns information about a chosen Milestone.
*/
func (a *Client) GetAPIV3MilestonesMilestonePublicID(params *GetAPIV3MilestonesMilestonePublicIDParams) (*GetAPIV3MilestonesMilestonePublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MilestonesMilestonePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3MilestonesMilestonePublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/milestones/{milestone-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3MilestonesMilestonePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3MilestonesMilestonePublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3MilestonesMilestonePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3MilestonesMilestonePublicIDEpics lists milestone epics

  List all of the Epics within the Milestone.
*/
func (a *Client) GetAPIV3MilestonesMilestonePublicIDEpics(params *GetAPIV3MilestonesMilestonePublicIDEpicsParams) (*GetAPIV3MilestonesMilestonePublicIDEpicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MilestonesMilestonePublicIDEpicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3MilestonesMilestonePublicIDEpics",
		Method:             "GET",
		PathPattern:        "/api/v3/milestones/{milestone-public-id}/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3MilestonesMilestonePublicIDEpicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3MilestonesMilestonePublicIDEpicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3MilestonesMilestonePublicIDEpics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Projects lists projects

  List Projects returns a list of all Projects and their attributes.
*/
func (a *Client) GetAPIV3Projects(params *GetAPIV3ProjectsParams) (*GetAPIV3ProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3ProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Projects",
		Method:             "GET",
		PathPattern:        "/api/v3/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3ProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3ProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3ProjectsProjectPublicID gets project

  Get Project returns information about the selected Project.
*/
func (a *Client) GetAPIV3ProjectsProjectPublicID(params *GetAPIV3ProjectsProjectPublicIDParams) (*GetAPIV3ProjectsProjectPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3ProjectsProjectPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3ProjectsProjectPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/projects/{project-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3ProjectsProjectPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3ProjectsProjectPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3ProjectsProjectPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3ProjectsProjectPublicIDStories lists stories

  List Stories returns a list of all Stories in a selected Project and their attributes.
*/
func (a *Client) GetAPIV3ProjectsProjectPublicIDStories(params *GetAPIV3ProjectsProjectPublicIDStoriesParams) (*GetAPIV3ProjectsProjectPublicIDStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3ProjectsProjectPublicIDStoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3ProjectsProjectPublicIDStories",
		Method:             "GET",
		PathPattern:        "/api/v3/projects/{project-public-id}/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3ProjectsProjectPublicIDStoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3ProjectsProjectPublicIDStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3ProjectsProjectPublicIDStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Repositories lists repositories

  List Repositories returns a list of all Repositories and their attributes.
*/
func (a *Client) GetAPIV3Repositories(params *GetAPIV3RepositoriesParams) (*GetAPIV3RepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3RepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Repositories",
		Method:             "GET",
		PathPattern:        "/api/v3/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3RepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3RepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Repositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3RepositoriesRepoPublicID gets repository

  Get Repository returns information about the selected Repository.
*/
func (a *Client) GetAPIV3RepositoriesRepoPublicID(params *GetAPIV3RepositoriesRepoPublicIDParams) (*GetAPIV3RepositoriesRepoPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3RepositoriesRepoPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3RepositoriesRepoPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/repositories/{repo-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3RepositoriesRepoPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3RepositoriesRepoPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3RepositoriesRepoPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Search searches

  Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
*/
func (a *Client) GetAPIV3Search(params *GetAPIV3SearchParams) (*GetAPIV3SearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Search",
		Method:             "GET",
		PathPattern:        "/api/v3/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3SearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3SearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3SearchEpics searches epics

  Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
*/
func (a *Client) GetAPIV3SearchEpics(params *GetAPIV3SearchEpicsParams) (*GetAPIV3SearchEpicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SearchEpicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3SearchEpics",
		Method:             "GET",
		PathPattern:        "/api/v3/search/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3SearchEpicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3SearchEpicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3SearchEpics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3SearchStories searches stories

  Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
*/
func (a *Client) GetAPIV3SearchStories(params *GetAPIV3SearchStoriesParams) (*GetAPIV3SearchStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SearchStoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3SearchStories",
		Method:             "GET",
		PathPattern:        "/api/v3/search/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3SearchStoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3SearchStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3SearchStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3StoriesStoryPublicID gets story

  Get Story returns information about a chosen Story.
*/
func (a *Client) GetAPIV3StoriesStoryPublicID(params *GetAPIV3StoriesStoryPublicIDParams) (*GetAPIV3StoriesStoryPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3StoriesStoryPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3StoriesStoryPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/stories/{story-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3StoriesStoryPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3StoriesStoryPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3StoriesStoryPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3StoriesStoryPublicIDCommentsCommentPublicID gets comment

  Get Comment is used to get Comment information.
*/
func (a *Client) GetAPIV3StoriesStoryPublicIDCommentsCommentPublicID(params *GetAPIV3StoriesStoryPublicIDCommentsCommentPublicIDParams) (*GetAPIV3StoriesStoryPublicIDCommentsCommentPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3StoriesStoryPublicIDCommentsCommentPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3StoriesStoryPublicIDCommentsCommentPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3StoriesStoryPublicIDCommentsCommentPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3StoriesStoryPublicIDCommentsCommentPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3StoriesStoryPublicIDTasksTaskPublicID gets task

  Returns information about a chosen Task.
*/
func (a *Client) GetAPIV3StoriesStoryPublicIDTasksTaskPublicID(params *GetAPIV3StoriesStoryPublicIDTasksTaskPublicIDParams) (*GetAPIV3StoriesStoryPublicIDTasksTaskPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3StoriesStoryPublicIDTasksTaskPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3StoriesStoryPublicIDTasksTaskPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/stories/{story-public-id}/tasks/{task-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3StoriesStoryPublicIDTasksTaskPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3StoriesStoryPublicIDTasksTaskPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3StoriesStoryPublicIDTasksTaskPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3StoryLinksStoryLinkPublicID gets story link

  Returns the stories and their relationship for the given Story Link.
*/
func (a *Client) GetAPIV3StoryLinksStoryLinkPublicID(params *GetAPIV3StoryLinksStoryLinkPublicIDParams) (*GetAPIV3StoryLinksStoryLinkPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3StoryLinksStoryLinkPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3StoryLinksStoryLinkPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/story-links/{story-link-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3StoryLinksStoryLinkPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3StoryLinksStoryLinkPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3StoryLinksStoryLinkPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Teams lists teams

  List Teams returns a list of all Teams in the organization.
*/
func (a *Client) GetAPIV3Teams(params *GetAPIV3TeamsParams) (*GetAPIV3TeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3TeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Teams",
		Method:             "GET",
		PathPattern:        "/api/v3/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3TeamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3TeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Teams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3TeamsTeamPublicID gets team

  Get Team is used to get Team information.
*/
func (a *Client) GetAPIV3TeamsTeamPublicID(params *GetAPIV3TeamsTeamPublicIDParams) (*GetAPIV3TeamsTeamPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3TeamsTeamPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3TeamsTeamPublicID",
		Method:             "GET",
		PathPattern:        "/api/v3/teams/{team-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3TeamsTeamPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3TeamsTeamPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3TeamsTeamPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV3Workflows lists workflows

  List Workflows returns a list of all Workflows in the organization.
*/
func (a *Client) GetAPIV3Workflows(params *GetAPIV3WorkflowsParams) (*GetAPIV3WorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3WorkflowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV3Workflows",
		Method:             "GET",
		PathPattern:        "/api/v3/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV3WorkflowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV3WorkflowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV3Workflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3Categories creates category

  Create Category allows you to create a new Category in Clubhouse.
*/
func (a *Client) PostAPIV3Categories(params *PostAPIV3CategoriesParams) (*PostAPIV3CategoriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3CategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3Categories",
		Method:             "POST",
		PathPattern:        "/api/v3/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3CategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3CategoriesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3Categories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3EntityTemplates creates entity template

  Create a new entity template for your organization.
*/
func (a *Client) PostAPIV3EntityTemplates(params *PostAPIV3EntityTemplatesParams) (*PostAPIV3EntityTemplatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3EntityTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3EntityTemplates",
		Method:             "POST",
		PathPattern:        "/api/v3/entity-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3EntityTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3EntityTemplatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3EntityTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3Epics creates epic

  Create Epic allows you to create a new Epic in Clubhouse.
*/
func (a *Client) PostAPIV3Epics(params *PostAPIV3EpicsParams) (*PostAPIV3EpicsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3EpicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3Epics",
		Method:             "POST",
		PathPattern:        "/api/v3/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3EpicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3EpicsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3Epics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3EpicsEpicPublicIDComments creates epic comment

  This endpoint allows you to create a threaded Comment on an Epic.
*/
func (a *Client) PostAPIV3EpicsEpicPublicIDComments(params *PostAPIV3EpicsEpicPublicIDCommentsParams) (*PostAPIV3EpicsEpicPublicIDCommentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3EpicsEpicPublicIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3EpicsEpicPublicIDComments",
		Method:             "POST",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3EpicsEpicPublicIDCommentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3EpicsEpicPublicIDCommentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3EpicsEpicPublicIDComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3EpicsEpicPublicIDCommentsCommentPublicID creates epic comment comment

  This endpoint allows you to create a nested Comment reply to an existing Epic Comment.
*/
func (a *Client) PostAPIV3EpicsEpicPublicIDCommentsCommentPublicID(params *PostAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams) (*PostAPIV3EpicsEpicPublicIDCommentsCommentPublicIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3EpicsEpicPublicIDCommentsCommentPublicID",
		Method:             "POST",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3EpicsEpicPublicIDCommentsCommentPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3EpicsEpicPublicIDCommentsCommentPublicIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3EpicsEpicPublicIDCommentsCommentPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3Files creates files
*/
func (a *Client) PostAPIV3Files(params *PostAPIV3FilesParams) (*PostAPIV3FilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3FilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3Files",
		Method:             "POST",
		PathPattern:        "/api/v3/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3FilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3FilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3Files: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3Groups creates group
*/
func (a *Client) PostAPIV3Groups(params *PostAPIV3GroupsParams) (*PostAPIV3GroupsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3GroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3Groups",
		Method:             "POST",
		PathPattern:        "/api/v3/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3GroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3GroupsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3Groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3Iterations creates iteration
*/
func (a *Client) PostAPIV3Iterations(params *PostAPIV3IterationsParams) (*PostAPIV3IterationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3IterationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3Iterations",
		Method:             "POST",
		PathPattern:        "/api/v3/iterations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3IterationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3IterationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3Iterations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3Labels creates label

  Create Label allows you to create a new Label in Clubhouse.
*/
func (a *Client) PostAPIV3Labels(params *PostAPIV3LabelsParams) (*PostAPIV3LabelsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3LabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3Labels",
		Method:             "POST",
		PathPattern:        "/api/v3/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3LabelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3LabelsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3Labels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3LinkedFiles creates linked file

  Create Linked File allows you to create a new Linked File in Clubhouse.
*/
func (a *Client) PostAPIV3LinkedFiles(params *PostAPIV3LinkedFilesParams) (*PostAPIV3LinkedFilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3LinkedFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3LinkedFiles",
		Method:             "POST",
		PathPattern:        "/api/v3/linked-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3LinkedFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3LinkedFilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3LinkedFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3Milestones creates milestone

  Create Milestone allows you to create a new Milestone in Clubhouse.
*/
func (a *Client) PostAPIV3Milestones(params *PostAPIV3MilestonesParams) (*PostAPIV3MilestonesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3MilestonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3Milestones",
		Method:             "POST",
		PathPattern:        "/api/v3/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3MilestonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3MilestonesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3Milestones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3Projects creates project

  Create Project is used to create a new Clubhouse Project.
*/
func (a *Client) PostAPIV3Projects(params *PostAPIV3ProjectsParams) (*PostAPIV3ProjectsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3ProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3Projects",
		Method:             "POST",
		PathPattern:        "/api/v3/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3ProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3ProjectsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3Projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3Stories creates story

  Create Story is used to add a new story to your Clubhouse.
*/
func (a *Client) PostAPIV3Stories(params *PostAPIV3StoriesParams) (*PostAPIV3StoriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3StoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3Stories",
		Method:             "POST",
		PathPattern:        "/api/v3/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3StoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3StoriesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3Stories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3StoriesBulk creates multiple stories

  Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://clubhouse.io/api/#create-story).
*/
func (a *Client) PostAPIV3StoriesBulk(params *PostAPIV3StoriesBulkParams) (*PostAPIV3StoriesBulkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3StoriesBulkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3StoriesBulk",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3StoriesBulkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3StoriesBulkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3StoriesBulk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3StoriesSearch searches stories old

  Search Stories lets you search Stories based on desired parameters.
*/
func (a *Client) PostAPIV3StoriesSearch(params *PostAPIV3StoriesSearchParams) (*PostAPIV3StoriesSearchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3StoriesSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3StoriesSearch",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3StoriesSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3StoriesSearchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3StoriesSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3StoriesStoryPublicIDComments creates comment

  Create Comment allows you to create a Comment on any Story.
*/
func (a *Client) PostAPIV3StoriesStoryPublicIDComments(params *PostAPIV3StoriesStoryPublicIDCommentsParams) (*PostAPIV3StoriesStoryPublicIDCommentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3StoriesStoryPublicIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3StoriesStoryPublicIDComments",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3StoriesStoryPublicIDCommentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3StoriesStoryPublicIDCommentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3StoriesStoryPublicIDComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions creates reaction

  Create a reaction to a comment.
*/
func (a *Client) PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions(params *PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsParams) (*PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3StoriesStoryPublicIDTasks creates task

  Create Task is used to create a new task in a Story.
*/
func (a *Client) PostAPIV3StoriesStoryPublicIDTasks(params *PostAPIV3StoriesStoryPublicIDTasksParams) (*PostAPIV3StoriesStoryPublicIDTasksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3StoriesStoryPublicIDTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3StoriesStoryPublicIDTasks",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/{story-public-id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3StoriesStoryPublicIDTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3StoriesStoryPublicIDTasksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3StoriesStoryPublicIDTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV3StoryLinks creates story link

  Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -> verb -> object.

The subject story acts on the object Story; the object story is the direct object of the sentence.

The subject story "blocks", "duplicates", or "relates to" the object story.  Examples:
- "story 5 blocks story 6” -- story 6 is now "blocked" until story 5 is moved to a Done workflow state.
- "story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived).
- "story 7 relates to story 3”
*/
func (a *Client) PostAPIV3StoryLinks(params *PostAPIV3StoryLinksParams) (*PostAPIV3StoryLinksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3StoryLinksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV3StoryLinks",
		Method:             "POST",
		PathPattern:        "/api/v3/story-links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV3StoryLinksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV3StoryLinksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV3StoryLinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3CategoriesCategoryPublicID updates category

  Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.
*/
func (a *Client) PutAPIV3CategoriesCategoryPublicID(params *PutAPIV3CategoriesCategoryPublicIDParams) (*PutAPIV3CategoriesCategoryPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3CategoriesCategoryPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3CategoriesCategoryPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/categories/{category-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3CategoriesCategoryPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3CategoriesCategoryPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3CategoriesCategoryPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3EntityTemplatesDisable disables story templates

  Disables the Story Template feature for the given Organization.
*/
func (a *Client) PutAPIV3EntityTemplatesDisable(params *PutAPIV3EntityTemplatesDisableParams) (*PutAPIV3EntityTemplatesDisableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3EntityTemplatesDisableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3EntityTemplatesDisable",
		Method:             "PUT",
		PathPattern:        "/api/v3/entity-templates/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3EntityTemplatesDisableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3EntityTemplatesDisableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3EntityTemplatesDisable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3EntityTemplatesEnable enables story templates

  Enables the Story Template feature for the given Organization.
*/
func (a *Client) PutAPIV3EntityTemplatesEnable(params *PutAPIV3EntityTemplatesEnableParams) (*PutAPIV3EntityTemplatesEnableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3EntityTemplatesEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3EntityTemplatesEnable",
		Method:             "PUT",
		PathPattern:        "/api/v3/entity-templates/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3EntityTemplatesEnableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3EntityTemplatesEnableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3EntityTemplatesEnable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3EntityTemplatesEntityTemplatePublicID updates entity template

  Update an entity template's name or its contents.
*/
func (a *Client) PutAPIV3EntityTemplatesEntityTemplatePublicID(params *PutAPIV3EntityTemplatesEntityTemplatePublicIDParams) (*PutAPIV3EntityTemplatesEntityTemplatePublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3EntityTemplatesEntityTemplatePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3EntityTemplatesEntityTemplatePublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/entity-templates/{entity-template-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3EntityTemplatesEntityTemplatePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3EntityTemplatesEntityTemplatePublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3EntityTemplatesEntityTemplatePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3EpicsEpicPublicID updates epic

  Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Clubhouse UI.
*/
func (a *Client) PutAPIV3EpicsEpicPublicID(params *PutAPIV3EpicsEpicPublicIDParams) (*PutAPIV3EpicsEpicPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3EpicsEpicPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3EpicsEpicPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/epics/{epic-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3EpicsEpicPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3EpicsEpicPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3EpicsEpicPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3EpicsEpicPublicIDCommentsCommentPublicID updates epic comment

  This endpoint allows you to update a threaded Comment on an Epic.
*/
func (a *Client) PutAPIV3EpicsEpicPublicIDCommentsCommentPublicID(params *PutAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams) (*PutAPIV3EpicsEpicPublicIDCommentsCommentPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3EpicsEpicPublicIDCommentsCommentPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3EpicsEpicPublicIDCommentsCommentPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3EpicsEpicPublicIDCommentsCommentPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3EpicsEpicPublicIDCommentsCommentPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3EpicsEpicPublicIDCommentsCommentPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3FilesFilePublicID updates file

  Update File can used to update the properties of a file uploaded to Clubhouse.
*/
func (a *Client) PutAPIV3FilesFilePublicID(params *PutAPIV3FilesFilePublicIDParams) (*PutAPIV3FilesFilePublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3FilesFilePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3FilesFilePublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/files/{file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3FilesFilePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3FilesFilePublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3FilesFilePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3GroupsDisable disables groups

  Disables Groups for the current workspace2
*/
func (a *Client) PutAPIV3GroupsDisable(params *PutAPIV3GroupsDisableParams) (*PutAPIV3GroupsDisableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3GroupsDisableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3GroupsDisable",
		Method:             "PUT",
		PathPattern:        "/api/v3/groups/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3GroupsDisableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3GroupsDisableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3GroupsDisable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3GroupsEnable enables groups

  Enables Groups for the current workspace2
*/
func (a *Client) PutAPIV3GroupsEnable(params *PutAPIV3GroupsEnableParams) (*PutAPIV3GroupsEnableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3GroupsEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3GroupsEnable",
		Method:             "PUT",
		PathPattern:        "/api/v3/groups/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3GroupsEnableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3GroupsEnableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3GroupsEnable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3GroupsGroupPublicID updates group
*/
func (a *Client) PutAPIV3GroupsGroupPublicID(params *PutAPIV3GroupsGroupPublicIDParams) (*PutAPIV3GroupsGroupPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3GroupsGroupPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3GroupsGroupPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/groups/{group-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3GroupsGroupPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3GroupsGroupPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3GroupsGroupPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3IterationsDisable disables iterations

  Disables Iterations for the current workspace
*/
func (a *Client) PutAPIV3IterationsDisable(params *PutAPIV3IterationsDisableParams) (*PutAPIV3IterationsDisableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3IterationsDisableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3IterationsDisable",
		Method:             "PUT",
		PathPattern:        "/api/v3/iterations/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3IterationsDisableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3IterationsDisableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3IterationsDisable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3IterationsEnable enables iterations

  Enables Iterations for the current workspace
*/
func (a *Client) PutAPIV3IterationsEnable(params *PutAPIV3IterationsEnableParams) (*PutAPIV3IterationsEnableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3IterationsEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3IterationsEnable",
		Method:             "PUT",
		PathPattern:        "/api/v3/iterations/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3IterationsEnableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3IterationsEnableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3IterationsEnable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3IterationsIterationPublicID updates iteration
*/
func (a *Client) PutAPIV3IterationsIterationPublicID(params *PutAPIV3IterationsIterationPublicIDParams) (*PutAPIV3IterationsIterationPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3IterationsIterationPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3IterationsIterationPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/iterations/{iteration-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3IterationsIterationPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3IterationsIterationPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3IterationsIterationPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3LabelsLabelPublicID updates label

  Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.
*/
func (a *Client) PutAPIV3LabelsLabelPublicID(params *PutAPIV3LabelsLabelPublicIDParams) (*PutAPIV3LabelsLabelPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3LabelsLabelPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3LabelsLabelPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/labels/{label-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3LabelsLabelPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3LabelsLabelPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3LabelsLabelPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3LinkedFilesLinkedFilePublicID updates linked file

  Updated Linked File allows you to update properties of a previously attached Linked-File.
*/
func (a *Client) PutAPIV3LinkedFilesLinkedFilePublicID(params *PutAPIV3LinkedFilesLinkedFilePublicIDParams) (*PutAPIV3LinkedFilesLinkedFilePublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3LinkedFilesLinkedFilePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3LinkedFilesLinkedFilePublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/linked-files/{linked-file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3LinkedFilesLinkedFilePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3LinkedFilesLinkedFilePublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3LinkedFilesLinkedFilePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3MilestonesMilestonePublicID updates milestone

  Update Milestone can be used to update Milestone properties.
*/
func (a *Client) PutAPIV3MilestonesMilestonePublicID(params *PutAPIV3MilestonesMilestonePublicIDParams) (*PutAPIV3MilestonesMilestonePublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3MilestonesMilestonePublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3MilestonesMilestonePublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/milestones/{milestone-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3MilestonesMilestonePublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3MilestonesMilestonePublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3MilestonesMilestonePublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3ProjectsProjectPublicID updates project

  Update Project can be used to change properties of a Project.
*/
func (a *Client) PutAPIV3ProjectsProjectPublicID(params *PutAPIV3ProjectsProjectPublicIDParams) (*PutAPIV3ProjectsProjectPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3ProjectsProjectPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3ProjectsProjectPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/projects/{project-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3ProjectsProjectPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3ProjectsProjectPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3ProjectsProjectPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3StoriesBulk updates multiple stories

  Update Multiple Stories allows you to make changes to numerous stories at once.
*/
func (a *Client) PutAPIV3StoriesBulk(params *PutAPIV3StoriesBulkParams) (*PutAPIV3StoriesBulkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3StoriesBulkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3StoriesBulk",
		Method:             "PUT",
		PathPattern:        "/api/v3/stories/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3StoriesBulkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3StoriesBulkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3StoriesBulk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3StoriesStoryPublicID updates story

  Update Story can be used to update Story properties.
*/
func (a *Client) PutAPIV3StoriesStoryPublicID(params *PutAPIV3StoriesStoryPublicIDParams) (*PutAPIV3StoriesStoryPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3StoriesStoryPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3StoriesStoryPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/stories/{story-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3StoriesStoryPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3StoriesStoryPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3StoriesStoryPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3StoriesStoryPublicIDCommentsCommentPublicID updates comment

  Update Comment replaces the text of the existing Comment.
*/
func (a *Client) PutAPIV3StoriesStoryPublicIDCommentsCommentPublicID(params *PutAPIV3StoriesStoryPublicIDCommentsCommentPublicIDParams) (*PutAPIV3StoriesStoryPublicIDCommentsCommentPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3StoriesStoryPublicIDCommentsCommentPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3StoriesStoryPublicIDCommentsCommentPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3StoriesStoryPublicIDCommentsCommentPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3StoriesStoryPublicIDCommentsCommentPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3StoriesStoryPublicIDCommentsCommentPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3StoriesStoryPublicIDTasksTaskPublicID updates task

  Update Task can be used to update Task properties.
*/
func (a *Client) PutAPIV3StoriesStoryPublicIDTasksTaskPublicID(params *PutAPIV3StoriesStoryPublicIDTasksTaskPublicIDParams) (*PutAPIV3StoriesStoryPublicIDTasksTaskPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3StoriesStoryPublicIDTasksTaskPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3StoriesStoryPublicIDTasksTaskPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/stories/{story-public-id}/tasks/{task-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3StoriesStoryPublicIDTasksTaskPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3StoriesStoryPublicIDTasksTaskPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3StoriesStoryPublicIDTasksTaskPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV3StoryLinksStoryLinkPublicID updates story link

  Updates the stories and/or the relationship for the given Story Link.
*/
func (a *Client) PutAPIV3StoryLinksStoryLinkPublicID(params *PutAPIV3StoryLinksStoryLinkPublicIDParams) (*PutAPIV3StoryLinksStoryLinkPublicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3StoryLinksStoryLinkPublicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV3StoryLinksStoryLinkPublicID",
		Method:             "PUT",
		PathPattern:        "/api/v3/story-links/{story-link-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV3StoryLinksStoryLinkPublicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV3StoryLinksStoryLinkPublicIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV3StoryLinksStoryLinkPublicID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
